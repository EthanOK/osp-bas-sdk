/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: meta.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum HashAlgo {
    Unknown = 0,
    SHA256 = 1
}
export enum BundleVersion {
    V1 = 0
}
export class ObjectMeta extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        offset?: number;
        size?: number;
        hash_algo?: HashAlgo;
        hash?: Uint8Array;
        content_type?: string;
        tags?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("offset" in data && data.offset != undefined) {
                this.offset = data.offset;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
            if ("hash_algo" in data && data.hash_algo != undefined) {
                this.hash_algo = data.hash_algo;
            }
            if ("hash" in data && data.hash != undefined) {
                this.hash = data.hash;
            }
            if ("content_type" in data && data.content_type != undefined) {
                this.content_type = data.content_type;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
        }
        if (!this.tags)
            this.tags = new Map();
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get offset() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set offset(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get size() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set size(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get hash_algo() {
        return pb_1.Message.getFieldWithDefault(this, 4, HashAlgo.Unknown) as HashAlgo;
    }
    set hash_algo(value: HashAlgo) {
        pb_1.Message.setField(this, 4, value);
    }
    get hash() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
    }
    set hash(value: Uint8Array) {
        pb_1.Message.setField(this, 5, value);
    }
    get content_type() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set content_type(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get tags() {
        return pb_1.Message.getField(this, 7) as any as Map<string, string>;
    }
    set tags(value: Map<string, string>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    static fromObject(data: {
        name?: string;
        offset?: number;
        size?: number;
        hash_algo?: HashAlgo;
        hash?: Uint8Array;
        content_type?: string;
        tags?: {
            [key: string]: string;
        };
    }): ObjectMeta {
        const message = new ObjectMeta({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.offset != null) {
            message.offset = data.offset;
        }
        if (data.size != null) {
            message.size = data.size;
        }
        if (data.hash_algo != null) {
            message.hash_algo = data.hash_algo;
        }
        if (data.hash != null) {
            message.hash = data.hash;
        }
        if (data.content_type != null) {
            message.content_type = data.content_type;
        }
        if (typeof data.tags == "object") {
            message.tags = new Map(Object.entries(data.tags));
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            offset?: number;
            size?: number;
            hash_algo?: HashAlgo;
            hash?: Uint8Array;
            content_type?: string;
            tags?: {
                [key: string]: string;
            };
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.offset != null) {
            data.offset = this.offset;
        }
        if (this.size != null) {
            data.size = this.size;
        }
        if (this.hash_algo != null) {
            data.hash_algo = this.hash_algo;
        }
        if (this.hash != null) {
            data.hash = this.hash;
        }
        if (this.content_type != null) {
            data.content_type = this.content_type;
        }
        if (this.tags != null) {
            data.tags = (Object.fromEntries)(this.tags);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.offset != 0)
            writer.writeUint64(2, this.offset);
        if (this.size != 0)
            writer.writeUint64(3, this.size);
        if (this.hash_algo != HashAlgo.Unknown)
            writer.writeEnum(4, this.hash_algo);
        if (this.hash.length)
            writer.writeBytes(5, this.hash);
        if (this.content_type.length)
            writer.writeString(6, this.content_type);
        for (const [key, value] of this.tags) {
            writer.writeMessage(7, this.tags, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ObjectMeta {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ObjectMeta();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.offset = reader.readUint64();
                    break;
                case 3:
                    message.size = reader.readUint64();
                    break;
                case 4:
                    message.hash_algo = reader.readEnum();
                    break;
                case 5:
                    message.hash = reader.readBytes();
                    break;
                case 6:
                    message.content_type = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ObjectMeta {
        return ObjectMeta.deserialize(bytes);
    }
}
export class BundleMeta extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        meta?: ObjectMeta[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("meta" in data && data.meta != undefined) {
                this.meta = data.meta;
            }
        }
    }
    get meta() {
        return pb_1.Message.getRepeatedWrapperField(this, ObjectMeta, 1) as ObjectMeta[];
    }
    set meta(value: ObjectMeta[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        meta?: ReturnType<typeof ObjectMeta.prototype.toObject>[];
    }): BundleMeta {
        const message = new BundleMeta({});
        if (data.meta != null) {
            message.meta = data.meta.map(item => ObjectMeta.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            meta?: ReturnType<typeof ObjectMeta.prototype.toObject>[];
        } = {};
        if (this.meta != null) {
            data.meta = this.meta.map((item: ObjectMeta) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.meta.length)
            writer.writeRepeatedMessage(1, this.meta, (item: ObjectMeta) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BundleMeta {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BundleMeta();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.meta, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ObjectMeta.deserialize(reader), ObjectMeta));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleMeta {
        return BundleMeta.deserialize(bytes);
    }
}

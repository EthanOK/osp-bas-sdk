import{EAS as e,SchemaRegistry as t,SchemaEncoder as a}from"@ethereum-attestation-service/eas-sdk";import{Client as s,VisibilityType as r,Long as n,RedundancyType as i,bytesFromBase64 as c}from"@bnb-chain/greenfield-js-sdk";import{hashMessage as o,getAddress as d}from"ethers";import{ReedSolomon as l}from"@bnb-chain/reed-solomon";const m=(t,a)=>{new e(a).connect(t)},u=async(e,a,s)=>{const r=new t(a);r.connect(e);const n=await r.register({schema:s.schema,resolverAddress:s.resolverAddress,revocable:s.revocable});return await n.wait()},p=async(e,a,s)=>{const r=new t(a);return r.connect(e),await r.getSchema({uid:s})},h=async(e,t,a)=>{t.connect(e);const s=await t.getOffchain(),r=Math.floor(Date.now()/1e3),n=await s.signOffchainAttestation({recipient:a.recipient,expirationTime:BigInt(0),time:BigInt(r),revocable:!0,version:1,nonce:BigInt(0),schema:a.schemaUID,refUID:a.refUID,data:a.encodedData},e);return JSON.stringify(n,(e,t)=>"bigint"==typeof t?Number(t).toString():t)},g=e=>`bas-${o(d(e)).substring(2,42)}`,b=async e=>{const t=await e.sp.getStorageProviders();return(null!=t?t:[]).filter(e=>e.endpoint.includes("nodereal"))},y=async e=>(await b(e)).map(e=>{var t;return{address:e.operatorAddress,endpoint:e.endpoint,name:null==(t=e.description)?void 0:t.moniker}}),f=async e=>{var t;const a=await b(e),s=Math.floor(Math.random()*a.length),r=[...a.slice(0,s),...a.slice(s+1)].map(e=>e.operatorAddress);return{id:a[s].id||0,endpoint:a[s].endpoint,primarySpAddress:null==(t=a[s])?void 0:t.operatorAddress,sealAddress:a[s].sealAddress,secondarySpAddresses:r}},w=new l;class I{constructor(e,t,a){this.client=void 0,this.address=null,this.client=s.create(e,t),this.address=a}async createBucket(e,t){const a=await f(this.client);t.startsWith("0x")||(t="0x"+t);let s,i=!1;try{const t=await this.client.bucket.getBucketMeta({bucketName:e});console.log("bucketMeta",t),i=!0}catch(e){}try{const i=await this.client.bucket.createBucket({bucketName:e,creator:this.address,visibility:r.VISIBILITY_TYPE_PUBLIC_READ,chargedReadQuota:n.fromString("0"),paymentAddress:this.address,primarySpAddress:a.primarySpAddress}),c=await i.simulate({denom:"BNB"});s=await i.broadcast({denom:"BNB",gasLimit:Number(null==c?void 0:c.gasLimit),gasPrice:(null==c?void 0:c.gasPrice)||"5000000000",payer:this.address,granter:"",privateKey:t}),console.log("transactionHash",s.transactionHash)}catch(e){i||console.log(e)}return i}async createObject(e,t,a,s=!1){console.log("started"),a.startsWith("0x")||(a="0x"+a);const o=JSON.parse(t),d=`${o.message.schema}.${o.uid}`,l=Buffer.from(t),m=w.encode(Uint8Array.from(l)),u=await this.client.object.createObject({bucketName:e,objectName:d,creator:this.address,visibility:s?r.VISIBILITY_TYPE_PRIVATE:r.VISIBILITY_TYPE_PUBLIC_READ,contentType:"json",redundancyType:i.REDUNDANCY_EC_TYPE,payloadSize:n.fromInt(l.byteLength),expectChecksums:m.map(e=>c(e))}),p=await u.simulate({denom:"BNB"}),{transactionHash:h}=await u.broadcast({denom:"BNB",gasLimit:Number(p.gasLimit),gasPrice:p.gasPrice,payer:this.address,granter:"",privateKey:a});console.log("create object success",h);const g=await this.client.object.uploadObject({bucketName:e,objectName:d,body:v(d,l),txnHash:h},{type:"ECDSA",privateKey:a});return 0===g.code&&console.log("upload object success",g),h}}function v(e,t){return{name:e,type:"",size:t.byteLength,content:t}}const B=e,A=a;export{B as BAS,I as GreenFieldClientTS,A as SchemaEncoder,h as createAttestOffChain,g as encodeAddrToBucketName,y as getAllSps,p as getSchemaByUID,b as getSps,m as initEAS,u as registerSchema,f as selectSp};
//# sourceMappingURL=index.modern.mjs.map

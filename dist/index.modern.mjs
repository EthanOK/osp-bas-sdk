import{EAS as e,SchemaRegistry as t}from"@ethereum-attestation-service/eas-sdk";import{Client as a,VisibilityType as s,Long as r,RedundancyType as n,bytesFromBase64 as i}from"@bnb-chain/greenfield-js-sdk";import{hashMessage as o,getAddress as c}from"ethers";import{ReedSolomon as d}from"@bnb-chain/reed-solomon";const l=(t,a)=>{new e(a).connect(t)},m=async(e,a,s)=>{const r=new t(a);r.connect(e);const n=await r.register({schema:s.schema,resolverAddress:s.resolverAddress,revocable:s.revocable});return await n.wait()},u=async(e,a,s)=>{const r=new t(a);return r.connect(e),await r.getSchema({uid:s})},p=async(e,t,a)=>{t.connect(e);const s=await t.getOffchain(),r=Math.floor(Date.now()/1e3),n=await s.signOffchainAttestation({recipient:a.recipient,expirationTime:BigInt(0),time:BigInt(r),revocable:!0,version:1,nonce:BigInt(0),schema:a.schemaUID,refUID:a.refUID,data:a.encodedData},e);return JSON.stringify(n,(e,t)=>"bigint"==typeof t?Number(t).toString():t)},h=e=>`bas-${o(c(e)).substring(2,42)}`,g=async e=>{const t=await e.sp.getStorageProviders();return(null!=t?t:[]).filter(e=>e.endpoint.includes("nodereal"))},b=async e=>(await g(e)).map(e=>{var t;return{address:e.operatorAddress,endpoint:e.endpoint,name:null==(t=e.description)?void 0:t.moniker}}),y=async e=>{var t;const a=await g(e),s=Math.floor(Math.random()*a.length),r=[...a.slice(0,s),...a.slice(s+1)].map(e=>e.operatorAddress);return{id:a[s].id||0,endpoint:a[s].endpoint,primarySpAddress:null==(t=a[s])?void 0:t.operatorAddress,sealAddress:a[s].sealAddress,secondarySpAddresses:r}},f=new d;class w{constructor(e,t,s){this.client=void 0,this.address=null,this.client=a.create(e,t),this.address=s}async createBucket(e,t){const a=await y(this.client);t.startsWith("0x")||(t="0x"+t);let n,i=!1;try{const t=await this.client.bucket.getBucketMeta({bucketName:e});console.log("bucketMeta",t),i=!0}catch(e){}try{const i=await this.client.bucket.createBucket({bucketName:e,creator:this.address,visibility:s.VISIBILITY_TYPE_PUBLIC_READ,chargedReadQuota:r.fromString("0"),paymentAddress:this.address,primarySpAddress:a.primarySpAddress}),o=await i.simulate({denom:"BNB"});n=await i.broadcast({denom:"BNB",gasLimit:Number(null==o?void 0:o.gasLimit),gasPrice:(null==o?void 0:o.gasPrice)||"5000000000",payer:this.address,granter:"",privateKey:t}),console.log("transactionHash",n.transactionHash)}catch(e){i||console.log(e)}return i}async createObject(e,t,a,o=!1){console.log("started"),a.startsWith("0x")||(a="0x"+a);const c=JSON.parse(t),d=`${c.message.schema}.${c.uid}`,l=Buffer.from(t),m=f.encode(Uint8Array.from(l)),u=await this.client.object.createObject({bucketName:e,objectName:d,creator:this.address,visibility:o?s.VISIBILITY_TYPE_PRIVATE:s.VISIBILITY_TYPE_PUBLIC_READ,contentType:"json",redundancyType:n.REDUNDANCY_EC_TYPE,payloadSize:r.fromInt(l.byteLength),expectChecksums:m.map(e=>i(e))}),p=await u.simulate({denom:"BNB"}),{transactionHash:h}=await u.broadcast({denom:"BNB",gasLimit:Number(p.gasLimit),gasPrice:p.gasPrice,payer:this.address,granter:"",privateKey:a});console.log("create object success",h);const g=await this.client.object.uploadObject({bucketName:e,objectName:d,body:I(d,l),txnHash:h},{type:"ECDSA",privateKey:a});return 0===g.code&&console.log("upload object success",g),h}}function I(e,t){return{name:e,type:"",size:t.byteLength,content:t}}export{w as GreenFieldClientTS,p as createAttestOffChain,h as encodeAddrToBucketName,b as getAllSps,u as getSchemaByUID,g as getSps,l as initEAS,m as registerSchema,y as selectSp};
//# sourceMappingURL=index.modern.mjs.map
